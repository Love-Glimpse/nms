package com.kuaidu.nms.partner.push.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.kuaidu.nms.entity.Book_list;
import com.kuaidu.nms.entity.ChapterList;
import com.kuaidu.nms.entity.PartnerInfo;
import com.kuaidu.nms.entity.PartnerKeyword;
import com.kuaidu.nms.entity.Partner_template_msg;
import com.kuaidu.nms.entity.RecCover;
import com.kuaidu.nms.partner.push.serviceImpl.KeywordReplyServiceImpl;
import com.kuaidu.nms.partner.push.serviceImpl.TemplateInformationServiceImpl;
import com.kuaidu.nms.utils.ResultData;
import com.kuaidu.nms.utils.Utils;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

/** 
 * @Title KeywordReplyController.java 
 * @description 关键词回复配置
 * @time 2018年11月7日 下午2:23:41 
 * @author victor 
 * @version 1.0 
**/
@Controller
@RequestMapping("templateInformation")
public class TemplateInformationController {
	@Autowired
	TemplateInformationServiceImpl tImpl;
	
	@RequestMapping("/templateInformationIndex")
	public ModelAndView templateInformationIndex(HttpSession session){
		ModelAndView mv = new ModelAndView();
		try {
			mv.setViewName("partner/PushChannel/templateInformation"); 
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mv;
	}
	@ResponseBody
	@RequestMapping("/getTemplateInformation")
	public String getTemplateInformation(HttpSession session,HttpServletRequest request){
		PartnerInfo partnerInfo = Utils.getPartnerFromSession(session);
		if (partnerInfo==null) {
			return null;
		}
		Integer page= Integer.parseInt(request.getParameter("page"));	
		Integer rows= Integer.parseInt(request.getParameter("rows"));
		Integer start_rows = (page-1)*rows;
		List<Partner_template_msg> templateInfos = tImpl.getTemplateInformation(start_rows,rows,partnerInfo.getPartner_id());
		int total = tImpl.getTemplateInformationCount();
		return ResultData.toJsonString(total, templateInfos);
	}
	
	
	
	@SuppressWarnings("finally")
	@ResponseBody
	@RequestMapping("/delTemplateInformation")
	public String delKeywords(HttpSession session,HttpServletRequest request){
		String node =request.getParameter("node");
		JSONObject jsonObject = new JSONObject();
		JSONArray jArray = new JSONArray();
		try {
			JSONArray jsonArray = JSONArray.fromObject(node);  
	        List<Object> list= new ArrayList<Object>();
	        for(int i=0;i<jsonArray.size();i++){
	            list.add(jsonArray.get(i));
	        }
	        System.out.println(list);
	        tImpl.delKeywords(list);
	        jsonObject.put("result", "0");
	        
		} catch (Exception e) {
			 jsonObject.put("result", "1");
			e.printStackTrace();
			
		}finally {
			jArray.add(jsonObject.toString());
			return jArray.toString();
		}
	}
	
	
	
	
	
		@ResponseBody
		@RequestMapping("/addTemplateInformation")
		public JSONObject addKeyword(HttpSession session,PartnerKeyword partnerKeyword){
			JSONObject retJson = new JSONObject();
			int ret=0;
			PartnerInfo partnerInfo = Utils.getPartnerFromSession(session);
			if (partnerInfo==null) {
				retJson.put("result", 3);
				return retJson;
			}
			partnerKeyword.setPartner_id(partnerInfo.getPartner_id());
			partnerKeyword.setStatus(1);
			
			ret = tImpl.addKeyword(partnerKeyword);
			retJson.put("result", ret);
			return retJson;
		
	}
		
		@ResponseBody
		@RequestMapping("/searchBook")
		public JSONObject searchBook(HttpSession session,Book_list book_list){
			JSONObject retJson = new JSONObject();
			List<Book_list> book_lists = tImpl.seachBook(book_list);
			retJson.put("book_name", book_lists);
			System.out.println(retJson);
			return retJson;
		
		}
		
		@ResponseBody
		@RequestMapping("/searchChapter")
		public JSONObject searchChapter(HttpSession session,ChapterList chapter_list){
			JSONObject retJson = new JSONObject();
			List<ChapterList> chapter_lists = tImpl.seaChapter(chapter_list);
			retJson.put("chapter_name", chapter_lists);
			System.out.println(retJson);
			return retJson;
			
		}
		@ResponseBody
		@RequestMapping("/activeImg")
		public JSONObject activeImg(HttpSession session,RecCover rec_cover){
			JSONObject retJson = new JSONObject();
			List<RecCover> rec_covers = tImpl.searchImg(rec_cover);
			retJson.put("active_img", rec_covers);
			System.out.println(retJson);
			return retJson;
			
		}
		
	
}
