package com.kuaidu.nms.user.serviceImpl;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.kuaidu.nms.config.Config;
import com.kuaidu.nms.entity.UserInfo;
import com.kuaidu.nms.user.mapper.UserManagementMapper;
import com.kuaidu.nms.utils.ResultData;
import com.kuaidu.nms.utils.fastdfs.FastDFSException;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
/*
 * 接口实现类
 * */
@Service
@Transactional 
public class UserManagementMapperImpl {
	@Autowired
	UserManagementMapper uMapper;
	@Autowired
	RedisTemplate<String, Object> redisTemplate;
	//查询书籍
	public List<UserInfo> getAllRecords(UserInfo rList) {
		 List<UserInfo> allRecords = uMapper.getAllRecords(rList);
		 
		 Set<String> keys = redisTemplate.keys("RequestOnline--ID:**");
			 for (int i = 0; i < allRecords.size(); i++) {
				for (String string : keys) {
					int userId = Integer.parseInt(StringUtils.substringAfter(string, ":"));
					if (allRecords.get(i).getUser_id() == userId) {
						allRecords.get(i).setOnline(1);
					}
				}
			}
	
		 return allRecords;
	}
	
	public String getAll(UserInfo userInfo, Integer isOnline, HttpServletRequest request) {
		String page= request.getParameter("page");	
		String rows= request.getParameter("rows");
		Integer start_rows = Integer.parseInt(page)*Integer.parseInt(rows)-Integer.parseInt(rows);
		userInfo.setStart_rows(start_rows);
		userInfo.setEnd_rows(Integer.parseInt(rows));
		Set<String> keys = redisTemplate.keys("RequestOnline--ID:**");
		List<Integer> ids = new ArrayList<>();
		if (keys != null) {
			for (String string : keys) {
				String substringAfterLast = StringUtils.substringAfterLast(string, ":");
				ids.add(Integer.parseInt(substringAfterLast));
			}
		}
		//查询全部用户
		if (isOnline ==null || isOnline ==  0) {
			 List<UserInfo> allRecords = uMapper.getAllRecords(userInfo);
				 for (int i = 0; i < allRecords.size(); i++) {
					for (Integer id : ids) {
						if (allRecords.get(i).getUser_id().equals(id) ) {
							allRecords.get(i).setOnline(1);
						}
					}
				}
				 int total = uMapper.getCount(userInfo);
				return ResultData.toJsonString(total, allRecords);
		//查询在线用户		
		} else if (isOnline == 1) {
			List<UserInfo> userInfos = uMapper.getUserInfosByIds(ids,userInfo);
			Integer onlineCount = uMapper.getOnlineCountUserInfosByIds(ids,userInfo);
			for (UserInfo userInfo1 : userInfos) {
				userInfo1.setOnline(1);
			}
			return ResultData.toJsonString(onlineCount, userInfos);
		}
		return null;
	}
	
	
	
	//获取书籍记录总行数
	public int getCount(UserInfo rList) {
		return uMapper.getCount(rList);
	}

	public int getOnlineNum() {
		Set<String> keys = redisTemplate.keys("RequestOnline--ID:**");
		return keys.size();
	}
	public List<UserInfo> getActiveUsersByPartnerId(Integer partner_id) {
		// TODO Auto-generated method stub
		return uMapper.getActiveUsersByPartnerId(partner_id);
	}
	public UserInfo getUserInfoByUserId(Integer user_id) {
		// TODO Auto-generated method stub
		return uMapper.getUserInfoByUserId(user_id);
	}

	public void delUsers(List<Object> list) {
		// TODO Auto-generated method stub
		
	}

	public int clearUsers(String node) {
		int ret = 0;
		try {
			JSONArray jsonArray = JSONArray.fromObject(node);  
			List<Object> list= new ArrayList<Object>();
			for(int i=0;i<jsonArray.size();i++){
			    String key = "User:"+ DigestUtils.md5Hex(jsonArray.get(i)+Config.TOKEN_KEY);
			    redisTemplate.delete(key);
			    list.add(jsonArray.get(i));
			}
			uMapper.clearUsers(list);
			ret = 1;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ret;
	}

	

}
