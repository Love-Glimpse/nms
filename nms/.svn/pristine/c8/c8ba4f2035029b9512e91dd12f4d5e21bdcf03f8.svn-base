package com.kuaidu.nms.partner.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.github.pagehelper.PageInfo;
import com.kuaidu.nms.entity.PartnerInfo;
import com.kuaidu.nms.entity.PartnerPushUrl;
import com.kuaidu.nms.entity.RecCover;
import com.kuaidu.nms.entity.RecTitle;
import com.kuaidu.nms.entity.RestReturn;
import com.kuaidu.nms.partner.serviceImpl.PartnerPushUrlServiceImpl;

@Controller
@RequestMapping("partner")
public class PartnerPushUrlController {
	
	@Autowired
	PartnerPushUrlServiceImpl partnerPushUrlService;
	@Autowired
	RedisTemplate<String, Object> redisTemplate;
	
	
	/**
	 * 添加推广链接
	 * @param type
	 * @param name
	 * @param chapterId
	 * @param session
	 * @return
	 */
	@ResponseBody
	@PostMapping("pushUrl")
	public RestReturn savePartnerPushUrl(PartnerPushUrl partnerPushUrl,HttpSession session){
			PartnerInfo partnerInfo = (PartnerInfo) session.getAttribute("partner_user");
			try {
				return partnerPushUrlService.savePartnerPushUrl(partnerInfo.getPartner_id(),partnerPushUrl);
			} catch (Exception e) {
				e.printStackTrace();
			}
			return RestReturn.fail();
		}
		
	
	@GetMapping("pushUrls")
	public String toPushUrlPage(HttpSession session,HttpServletRequest request,@RequestParam(required=false)String name
			,@RequestParam(defaultValue="1")Integer pn,@RequestParam(defaultValue="10")Integer ps){
		PartnerInfo partnerInfo = (PartnerInfo) session.getAttribute("partner_user");
		PageInfo<PartnerPushUrl> pageInfo = partnerPushUrlService.getPushUrlInfo(partnerInfo.getPartner_id(),pn,ps,name);
		request.setAttribute("pageInfo", pageInfo);
		request.setAttribute("name", name);
		return "partner/PushChannel/pushUrl";
	}
	
	/**
	 * 删除推广链接
	 * @param pushId
	 * @return
	 */
	@ResponseBody
	@DeleteMapping("pushUrl/{pushId}")
	public RestReturn deletePartnerPushUrl(@PathVariable()Integer pushId){
		return  partnerPushUrlService.deletePartnerPushUrl(pushId);
	}
	
	
	@ResponseBody
	@PutMapping("pushUrl/{pushId}")
	public RestReturn updateeartnerPushUrl(@PathVariable()Integer pushId,String name){
		return  partnerPushUrlService.updatePartnerPushUrl(pushId,name);
	}
	
	/**
	 * 微信推广模板
	 * @param bookId
	 * @param chapterNum
	 * @param mode
	 * @param request
	 * @return
	 */
	@GetMapping("wx_editor/{bookId}/{chapterNum}")
	public String sdf(@PathVariable()Integer bookId,@PathVariable()Integer chapterNum,@RequestParam()String mode,HttpServletRequest request) {
		 List<Map<String,Object>> chapters = partnerPushUrlService.getChapterContent(bookId,chapterNum);
		 Map<String, Object> map = partnerPushUrlService.getBookPicAndNextChapterId(bookId,chapterNum);
		 RecCover recCover = partnerPushUrlService.getRanDomRecCover();
		 List<RecTitle> recTitles = partnerPushUrlService.getRecTitle();
		 request.setAttribute("chapters", chapters);
		 request.setAttribute("map", map);
		 request.setAttribute("recCover", recCover);//随机封面
		 request.setAttribute("recTitles", recTitles);//标题
		 request.setAttribute("bookId", bookId);
		 request.setAttribute("chapterNum", chapterNum);
		return "partner/PushChannel/referencedCopywriting";
	}
	
	/**
	 * 获取公开链接
	 * @param pushId
	 * @return
	 */
	@ResponseBody
	@PostMapping("openUrl/{pushId}")
	public Object createOpenUrl(@PathVariable()Integer pushId) {
		
		return  partnerPushUrlService.createOpenUrl(pushId);
		
	}
	
	@ResponseBody
	@PutMapping("reset/openUrl/{pushId}")
	public Object resetExpiryDate(@PathVariable()Integer pushId) {
		
		return  partnerPushUrlService.resetExpiryDate(pushId);
		
	}
	
	
	
	
	
	/**
	 * 加载封面图
	 * @param pn
	 * @return
	 */
	@ResponseBody
	@RequestMapping("covers")
	public Object getCover(Integer pn) {
		return partnerPushUrlService.getCover(pn);
	}
	
	
	
	
}
