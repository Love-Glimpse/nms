package com.kuaidu.nms.pushchannel.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.kuaidu.nms.entity.PartnerInfo;
import com.kuaidu.nms.entity.PartnerPmConfig;
import com.kuaidu.nms.entity.Sys_user;
import com.kuaidu.nms.pushchannel.serviceImpl.PartnerInfoMapperImpl;
import com.kuaidu.nms.utils.ResultData;

import net.sf.json.JSONObject;

@Controller
@RequestMapping("/partnerInfo")
public class PartnerInfoManage {
	@Autowired
	PartnerInfoMapperImpl pImpl;

	public PartnerInfoMapperImpl getpImpl() {
		return pImpl;
	}

	public void setpImpl(PartnerInfoMapperImpl pImpl) {
		this.pImpl = pImpl;
	}

	@RequestMapping("/partnerInfoIndex")
	public ModelAndView partnerInfoIndex(HttpServletRequest request, HttpSession session) {
		ModelAndView mv = new ModelAndView();

		try {
			mv.setViewName("PushChannel/partnerInfo");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mv;
	}

	@RequestMapping("/getSubPartner")
	public ModelAndView getSubPartner(HttpServletRequest request, HttpSession session) {
		ModelAndView mv = new ModelAndView();

		try {
			mv.setViewName("PushChannel/subPartner");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mv;
	}

	@ResponseBody
	@RequestMapping("/getAllpartnerInfo")
	public String getAllpartnerInfo(HttpServletRequest request, PartnerInfo partnerInfo) {
		// 获取页数 1
		// String page= request.getParameter("page");
		// 获取行数 20
		// String rows= request.getParameter("rows");
		PageHelper.startPage(partnerInfo.getPage(), partnerInfo.getRows());
		List<PartnerInfo> list = pImpl.getAllPartnerInfo(partnerInfo);
		PageInfo<PartnerInfo> partnerGroups = new PageInfo<>(list);
		return ResultData.toJsonString((int) partnerGroups.getTotal(), list);
	}

	@ResponseBody
	@RequestMapping("/getSubPartnerInfo")
	public String getSubPartnerInfo(HttpServletRequest request, PartnerInfo partnerInfo) {
		// 获取页数 1
		// String page= request.getParameter("page");
		// 获取行数 20
		// String rows= request.getParameter("rows");
		PageHelper.startPage(partnerInfo.getPage(), partnerInfo.getRows());
		List<PartnerInfo> list = pImpl.getSubPartnerInfo(partnerInfo);
		PageInfo<PartnerInfo> partnerGroups = new PageInfo<>(list);
		return ResultData.toJsonString((int) partnerGroups.getTotal(), list);
	}

	@ResponseBody
	@RequestMapping("/getPartnerSymbol")
	public JSONObject getPartnerSymbol(HttpServletRequest request, HttpServletResponse response, HttpSession session,
			@RequestParam() int partner_id) {
		JSONObject jsonRet = new JSONObject();
		String login_flag = (String) session.getAttribute("login_flag");
		int level = 0;
		if (login_flag == null) {
			jsonRet.put("partner_symbol", "");
			return jsonRet;
		}
		if (login_flag.equalsIgnoreCase("system") && partner_id == 0) {
			level = 1;
		} else{
			level = 2;
		}
		// 获取partner_info 的最大id
		int nextPartnerId = pImpl.getNextPartnerId();

		jsonRet.put("sub_domain", "c"+nextPartnerId);
		if (nextPartnerId==0) {
			jsonRet.put("partner_symbol", "");
			return jsonRet;
		}
		jsonRet.put("partner_symbol", "N" + level + "CP" + nextPartnerId);
		return jsonRet;
	}

	@ResponseBody
	@RequestMapping("/addEditPartnerInfo")
	public JSONObject addEditChannelGroup(HttpServletRequest request, PartnerInfo partnerInfo, HttpSession session) {
		JSONObject jsonRet = new JSONObject();
		String login_flag = (String) session.getAttribute("login_flag");
		int ret = 0;
		if (login_flag == null||!login_flag.equalsIgnoreCase("system")) {
			jsonRet.put("success", "0");
			return jsonRet;
		}
		if (partnerInfo.getPartner_id() > 0) {// 编辑
			ret = pImpl.updatePartnerInfo(partnerInfo);
		} else {// 添加
			ret = pImpl.addPartnerInfo(partnerInfo);
		}
		jsonRet.put("success", ret);
		return jsonRet;
	}

	@ResponseBody
	@RequestMapping("/delPartnerInfo")
	public JSONObject delPartnerInfo(HttpServletRequest request, @RequestParam() int partner_id) {
		JSONObject jsonRet = new JSONObject();
		int ret = pImpl.delPartnerInfo(partner_id);
		jsonRet.put("success", ret);
		return jsonRet;
	}

	@ResponseBody
	@RequestMapping("/getPartnerPmConfig")
	public JSONObject getPartnerLogoConfig(HttpServletRequest request, @RequestParam() int partner_id) {
		JSONObject jsonRet = new JSONObject();
		PartnerPmConfig pConfig = pImpl.getPartnerPmConfig(partner_id);
		jsonRet.put("data", pConfig);
		return jsonRet;
	}

/*	@ResponseBody
	@RequestMapping("/savePartnerLogoConfig")
	public JSONObject savePartnerLogoConfig(HttpServletRequest request, PartnerLogo partnerLogo) {
		JSONObject jsonRet = new JSONObject();
		int ret = pImpl.savePartnerLogoConfig(partnerLogo);
		jsonRet.put("success", ret);
		return jsonRet;
	}*/

	@ResponseBody
	@RequestMapping("/changePaPwd")
	public JSONObject changePaPwd(HttpSession session, @RequestParam("s_pwd") String s_pwd,
			@RequestParam("n_pwd") String n_pwd, @RequestParam("flag") int flag, @RequestParam("id") int id) {
		JSONObject jsonRet = new JSONObject();
		int ret = 1;
		String login_flag = (String) session.getAttribute("login_flag");
		if (null == login_flag || (!login_flag.equalsIgnoreCase("system") && !login_flag.equalsIgnoreCase("partner"))) {
			jsonRet.put("result", 12);//
		} else if (login_flag.equalsIgnoreCase("partner")) {// 渠道登录,修改自己密码
			PartnerInfo partnerInfo = (PartnerInfo) session.getAttribute("partner_user");
			if (partnerInfo != null && partnerInfo.getPartner_id() == id) {
				// 渠道修改自己密码
				// 验证原密码
				if (pImpl.checkPaUser(id, s_pwd) > 0) {
					// 开始修改
					ret = pImpl.changePaPwd(id, n_pwd, s_pwd);
					jsonRet.put("result", ret);// 修改成功
					session.removeAttribute("login_flag");
					session.removeAttribute("user");
				} else {
					jsonRet.put("result", 11);// 密码验证 错误
				}
			} else {
				jsonRet.put("result", 10);
			}
		} else if (login_flag.equalsIgnoreCase("system")) {// 系统管理员修改密码
			Sys_user sUser = (Sys_user) session.getAttribute("user");
			if (sUser != null && sUser.getGroup_id() == 1) {
				// 开始修改
				ret = pImpl.changePaPwd(id, n_pwd, s_pwd);
				jsonRet.put("result", ret);// 修改成功
			} else {
				jsonRet.put("result", 14);
			}
		} else {
			jsonRet.put("result", 13);
		}

		return jsonRet;
	}

	/**
	 * 上传网络logo
	 * @param file
	 * @param request
	 * @param partnerId
	 * @return
	 * @throws Exception
	 */
/*	@ResponseBody
	@RequestMapping("upload/partnerLogo")
	public Object uploadPartnerLog(@RequestParam(value = "file") MultipartFile file, HttpServletRequest request,
			@RequestParam() Integer partnerId) throws Exception {

		return pImpl.uploadPartnerLog(partnerId, file);

	}*/
	
	/**
	 * 上传二维码
	 * @param file
	 * @param request
	 * @param partnerId
	 * @return
	 * @throws Exception
	 */
/*	@ResponseBody
	@RequestMapping("upload/qrCode")
	public Object uploadQRCode(@RequestParam(value = "file") MultipartFile file, HttpServletRequest request,
			@RequestParam() Integer partnerId) throws Exception {

		return pImpl.uploadQRCode(partnerId, file);
	}
	
	@ResponseBody
	@RequestMapping("savePartnerLogo")
	public Object savePartnerLogo(PartnerLogo partnerLogo) {
		return pImpl.savePartnerLogo(partnerLogo);
	}*/
	

}
