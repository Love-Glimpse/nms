package com.kuaidu.nms.partner.serviceImpl;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import org.apache.commons.io.Charsets;
import org.apache.commons.io.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.kuaidu.nms.entity.ChapterList;
import com.kuaidu.nms.entity.PartnerPushUrl;
import com.kuaidu.nms.entity.RecCover;
import com.kuaidu.nms.entity.RecTitle;
import com.kuaidu.nms.entity.RestReturn;
import com.kuaidu.nms.partner.mapper.PartnerPushUrlMapper;
import com.kuaidu.nms.query.mapper.ChapterMapper;

@Service
public class PartnerPushUrlServiceImpl {
	
	//推广连接
	String referralUrl = "http://www.looku.cn/kdread/referral/";
	
	@Autowired
	PartnerPushUrlMapper partnerPushUrlMapper;
	@Autowired
	ChapterMapper chapterMapper;
	@Autowired
	RedisTemplate<String, Object> redisTemplate;
	

	



	public RestReturn savePartnerPushUrl(Integer partner_id, String name,Integer type,Integer chapterId) {
		//添加推广章节url
		PartnerPushUrl partnerPushUrl = new PartnerPushUrl();
		//章节推广
		if (type == 0) { 
			if (chapterId == null) {
				return RestReturn.fail();
			}
			partnerPushUrl.setChapter_id(chapterId);
			partnerPushUrl.setSource_url("http://www.looku.cn/kdread/chapter/"+chapterId);
		//首页推广
		}else if(type == 1){
			partnerPushUrl.setSource_url("http://www.looku.cn/kdread/index");
		}
		partnerPushUrl.setType(type);
		partnerPushUrl.setName(name);
		partnerPushUrl.setPartner_id(partner_id);
		partnerPushUrlMapper.savePartnerPushUrl(partnerPushUrl);
		return RestReturn.success(referralUrl+partnerPushUrl.getPush_id());
		
	}



	public PageInfo<PartnerPushUrl> getPushUrlInfo(int partner_id, Integer pn, Integer ps, String name) {
		PageHelper.startPage(pn, ps);
		List<PartnerPushUrl> list  = partnerPushUrlMapper.getPushUrlInfo(partner_id,name);
		
		PageInfo<PartnerPushUrl> pageInfo = new PageInfo<PartnerPushUrl>(list, 5);
		return pageInfo;
	}



	public RestReturn deletePartnerPushUrl(Integer pushId) {
		 int num = partnerPushUrlMapper.deletePartnerPushUrl(pushId);
		 if (num > 0) {
			return RestReturn.success();
		}
		 return RestReturn.fail();
	}



	public RestReturn updatePartnerPushUrl(Integer pushId, String name) {
		 int num = partnerPushUrlMapper.updatePartnerPushUrl(pushId,name);
		 if (num > 0) {
			return RestReturn.success();
		}
		 return RestReturn.fail();
	}



	public List<Map<String, Object>> getChapterContent(Integer bookId, Integer chapterNum) {
		List<Map<String,Object>> list = chapterMapper.getChapterContent(bookId,chapterNum);
		for (int i = 0; i < list.size(); i++) {
			String object = (String) list.get(i).get("chapter_filepath_fdfs");
			try {
				List<String> contentByUrl = getContentByUrl(object);
				list.get(i).put("content", contentByUrl);
			} catch (Exception e) {
				e.printStackTrace();
			}
			
		}
		
		
		return list;
	}
	
	public static List<String> getContentByUrl(String fileUrl) throws Exception {
		List<String> list = new ArrayList<>();
		URL url = new URL(fileUrl);
		InputStream inputStream = url.openStream();
		ZipInputStream zipInputStream = new ZipInputStream(inputStream);
		ZipEntry zipEntry = null;
		StringBuffer sb = new StringBuffer();
		while ((zipEntry = zipInputStream.getNextEntry()) != null) {
			InputStreamReader inputStreamReader = new InputStreamReader(zipInputStream, Charsets.toCharset("UTF-8"));
			BufferedReader reader = toBufferedReader(inputStreamReader);
			String line = reader.readLine();
			while (line != null && !line.equalsIgnoreCase("null")) {
				if (line.length() > 1) {
					list.add(line);
				}
				line = reader.readLine();
			}
		}
		return list;
	}

	public static BufferedReader toBufferedReader(Reader reader) {
		return reader instanceof BufferedReader ? (BufferedReader) reader : new BufferedReader(reader);
	}



	public Map<String, Object> getBookPicAndNextChapterId(Integer bookId, Integer chapterNum) {
		return chapterMapper.getBookPicAndNextChapterId(bookId,chapterNum);
		 
	}



	public Object getCover(Integer pn) {
		PageHelper.startPage(pn, 15);
		List<RecCover> list = partnerPushUrlMapper.getCover();
		PageInfo<RecCover> pageInfo = new PageInfo<>(list);
		return pageInfo;
	}



	



	public RecCover getRanDomRecCover() {
		return partnerPushUrlMapper.getRanDomRecCover();
		 
	}



	public List<RecTitle> getRecTitle() {
		return partnerPushUrlMapper.getRecTitle();
	}

}
