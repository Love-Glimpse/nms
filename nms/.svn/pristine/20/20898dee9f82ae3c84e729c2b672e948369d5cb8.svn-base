package com.kuaidu.nms.datastaticstics.serviceImpl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.kuaidu.nms.datastaticstics.mapper.StatOrderPushMapper;
import com.kuaidu.nms.entity.StatOrderPush;
import com.kuaidu.nms.entity.StatOrderPushByDay;
import com.kuaidu.nms.utils.ResultData;
import com.kuaidu.nms.utils.Utils;
import com.rabbitmq.client.AMQP.Basic.Return;

/** 
 * @description TODO 
 * @time 2018年9月11日 下午2:01:37 
 * @author victor 
 * @version 1.0 
**/
@Service
public class StatOrderPushMapperImpl {
	@Autowired
	StatOrderPushMapper sMapper;
	public String getStatOrders(StatOrderPushByDay statOrderPushByDay) {
		// TODO Auto-generated method stub
		List<StatOrderPushByDay> statOrderPushByDays = new ArrayList<StatOrderPushByDay>();
		List<String> dates = Utils.findDates(statOrderPushByDay.getStart_date(),statOrderPushByDay.getEnd_date());
		StatOrderPush statOrderPush = new StatOrderPush();
		statOrderPush.setParent_id(statOrderPushByDay.getParent_id());
		statOrderPush.setPartner_id(statOrderPushByDay.getPartne_id());
		statOrderPush.setPush_id(statOrderPushByDay.getPush_id());
		for (String date : dates) {
			statOrderPush.setSub_date(date);
			StatOrderPushByDay sByDay = new StatOrderPushByDay();
			sByDay.setSub_date(date);
			double day1 = 0.00;
			double day2 = 0.00;
			double day3 = 0.00;
			double day4 = 0.00;
			double day5 = 0.00;
			double day6 = 0.00;
			double day7 = 0.00;
			double day15 = 0.00;
			double day30 = 0.00;
			double day60 = 0.00;
			double day90 = 0.00;
			double dayAll = 0.00;
			List<StatOrderPush> sOrderPushs = sMapper.getStatOrders(statOrderPush);
			for (int i = 0; i < sOrderPushs.size(); i++) {
				sByDay.setParent_id(sOrderPushs.get(i).getParent_id());
				sByDay.setPartne_id(sOrderPushs.get(i).getPartner_id());
				sByDay.setPush_id(sOrderPushs.get(i).getPush_id());
				if (i<1) {
					day1 = day1+sOrderPushs.get(i).getAmount();
				}
				if (i<2) {
					day2 = day2+sOrderPushs.get(i).getAmount();
				}
				if (i<3) {
					day3 = day3+sOrderPushs.get(i).getAmount();
				}
				if (i<4) {
					day4 = day4+sOrderPushs.get(i).getAmount();
				}
				
				if (i<5) {
					day5 = day5+sOrderPushs.get(i).getAmount();
				}
				if (i<6) {
					day6 = day6+sOrderPushs.get(i).getAmount();
				}
				if (i<7) {
					day7 = day7+sOrderPushs.get(i).getAmount();
				}
				if (i<15) {
					day15 = day15+sOrderPushs.get(i).getAmount();
				}
				if (i<30) {
					day30 = day30+sOrderPushs.get(i).getAmount();
				}
				if (i<60) {
					day60 = day60+sOrderPushs.get(i).getAmount();
				}
				if (i<90) {
					day90 = day90+sOrderPushs.get(i).getAmount();
				}
				dayAll = dayAll+sOrderPushs.get(i).getAmount();
			}
			System.out.println(dayAll);
			sByDay.setDay1(String.valueOf(day1));
			sByDay.setDay2(String.valueOf(day2));
			sByDay.setDay3(String.valueOf(day3));
			sByDay.setDay4(String.valueOf(day4));
			sByDay.setDay5(String.valueOf(day5));
			sByDay.setDay6(String.valueOf(day6));
			sByDay.setDay7(String.valueOf(day7));
			sByDay.setDay15(String.valueOf(day15));
			sByDay.setDay30(String.valueOf(day30));
			sByDay.setDay60(String.valueOf(day60));
			sByDay.setDay90(String.valueOf(day90));
			sByDay.setDayAll(String.valueOf(dayAll));
			System.out.println(sByDay.toString());
			statOrderPushByDays.add(sByDay);
		}
		return ResultData.toJsonString(statOrderPushByDays.size(),statOrderPushByDays);
	}
}
