package com.kuaidu.nms.partner.datastat.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.kuaidu.nms.entity.Novel_type;
import com.kuaidu.nms.entity.PartnerInfo;
import com.kuaidu.nms.entity.PayChannel;
import com.kuaidu.nms.entity.UserOrder;
import com.kuaidu.nms.entity.UserReadLog;
import com.kuaidu.nms.partner.datastat.serviceImpl.PartnerUserOrderMapperImpl;
import com.kuaidu.nms.pay.serviceImpl.PayChannelServiceImpl;
import com.kuaidu.nms.query.serviceImpl.RechargeRecordMapperImpl;
import com.kuaidu.nms.utils.ResultData;
import com.kuaidu.nms.utils.Utils;


@Controller
@RequestMapping("/partnerUserOrder")
public class PartnerUserOrderController {
	@Autowired
	private PartnerUserOrderMapperImpl pImpl;
	
	@RequestMapping("/partnerUserOrderIndex")
	public ModelAndView readingRecordsManageIndex(HttpSession session){
		ModelAndView mv = new ModelAndView();
		try {
			mv.setViewName("partner/dataStat/partnerUserOrder");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mv;
	}
	/*
	 * 使用了分页的话，其框架自身会向后台传递page、rows这个两个属性值。
	 * 分别表示当前页和当前页显示的记录行数。
	 * 可以在action中定义好这两个属性，并同样设置getter和setter方法，就可以接受到这些参数了。
	 * */
	//查
	@ResponseBody
	@RequestMapping("/getOrders")
	public String getAll(HttpServletRequest request,HttpSession session,UserOrder userOrder){	
		PartnerInfo partnerInfo = Utils.getPartnerFromSession(session);
		if (partnerInfo==null) {
			return "";
		}else {
			userOrder.setPartner_id(partnerInfo.getPartner_id());
		}
		String page= request.getParameter("page");	
		String rows= request.getParameter("rows");
		Integer start_rows = Integer.parseInt(page)*Integer.parseInt(rows)-Integer.parseInt(rows);
		userOrder.setStart_rows(start_rows);
		userOrder.setEnd_rows(Integer.parseInt(rows));
		List<UserOrder> list = pImpl.getAllRecords(userOrder);
		int total = pImpl.getCount(userOrder);
		return ResultData.toJsonString(total, list);
	}
}
