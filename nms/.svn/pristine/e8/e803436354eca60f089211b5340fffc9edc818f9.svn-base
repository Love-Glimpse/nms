package com.kuaidu.nms.user.serviceImpl;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.kuaidu.nms.entity.UserInfo;
import com.kuaidu.nms.user.mapper.UserManagementMapper;
import com.kuaidu.nms.utils.ResultData;
/*
 * 接口实现类
 * */
@Service
@Transactional 
public class UserManagementMapperImpl {
	@Autowired
	UserManagementMapper uMapper;
	@Autowired
	RedisTemplate<String, Object> redisTemplate;
	//查询书籍
	public List<UserInfo> getAllRecords(UserInfo rList) {
		 List<UserInfo> allRecords = uMapper.getAllRecords(rList);
		 
		 Set<String> keys = redisTemplate.keys("RequestOnline--ID:**");
			 for (int i = 0; i < allRecords.size(); i++) {
				for (String string : keys) {
					int userId = Integer.parseInt(StringUtils.substringAfter(string, ":"));
					if (allRecords.get(i).getUser_id() == userId) {
						allRecords.get(i).setOnline(1);
					}
				}
			}
	
		 return allRecords;
	}
	
	public String getAll(UserInfo rList, Integer isOnline, HttpServletRequest request) {
		String page= request.getParameter("page");	
		String rows= request.getParameter("rows");
		Integer start_rows = Integer.parseInt(page)*Integer.parseInt(rows)-Integer.parseInt(rows);
		rList.setStart_rows(start_rows);
		rList.setEnd_rows(Integer.parseInt(rows));
		Set<String> keys = redisTemplate.keys("RequestOnline--ID:**");
		List<Integer> ids = new ArrayList<>();
		if (keys != null) {
			for (String string : keys) {
				String substringAfterLast = StringUtils.substringAfterLast(string, ":");
				ids.add(Integer.parseInt(substringAfterLast));
			}
		}
		//查询全部用户
		if (isOnline ==null || isOnline ==  0) {
			 List<UserInfo> allRecords = uMapper.getAllRecords(rList);
				 for (int i = 0; i < allRecords.size(); i++) {
					for (Integer id : ids) {
						if (allRecords.get(i).getUser_id().equals(id) ) {
							allRecords.get(i).setOnline(1);
						}
					}
				}
				 int total = uMapper.getCount(rList);
				return ResultData.toJsonString(total, allRecords);
		//查询在线用户		
		}else if(isOnline == 1) {
			//List<String> list = new ArrayList<>(keys);
			 int total = ids.size();
			 if (total > 0) {
				 int row = Integer.parseInt(rows);
				 List<Integer> subList = null;
				 if (total > row) {
					 subList = ids.subList(start_rows, start_rows+row);
				}else {
					subList = ids;
				}
				 List<UserInfo> userInfos = uMapper.getUserInfosByIds(subList);
				 for (UserInfo userInfo : userInfos) {
					userInfo.setOnline(1);
				}
				 return ResultData.toJsonString(total, userInfos);
			}else {
				return ResultData.toJsonString(total, null);
				
			}
			 
			
		}
		return null;
	}
	
	
	
	//获取书籍记录总行数
	public int getCount(UserInfo rList) {
		return uMapper.getCount(rList);
	}

	public int getOnlineNum() {
		Set<String> keys = redisTemplate.keys("RequestOnline--ID:**");
		return keys.size();
	}
	public List<UserInfo> getActiveUsersByPartnerId(Integer partner_id) {
		// TODO Auto-generated method stub
		return uMapper.getActiveUsersByPartnerId(partner_id);
	}
	public UserInfo getUserInfoByUserId(Integer user_id) {
		// TODO Auto-generated method stub
		return uMapper.getUserInfoByUserId(user_id);
	}


	

}
