package com.kuaidu.nms.partner.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.github.pagehelper.PageInfo;
import com.kuaidu.nms.entity.PartnerInfo;
import com.kuaidu.nms.entity.PartnerPushUrl;
import com.kuaidu.nms.entity.RestReturn;
import com.kuaidu.nms.partner.serviceImpl.PartnerPushUrlServiceImpl;

@Controller
@RequestMapping("partner")
public class PartnerPushUrlController {
	
	@Autowired
	PartnerPushUrlServiceImpl partnerPushUrlService;
	
	
	
	@ResponseBody
	@PostMapping("pushUrl")
	public RestReturn savePartnerPushUrl(Integer type,String name,@RequestParam(required=false)Integer chapterId,HttpSession session){
			PartnerInfo partnerInfo = (PartnerInfo) session.getAttribute("partner_user");
			try {
				return partnerPushUrlService.savePartnerPushUrl(partnerInfo.getPartner_id(),name,type,chapterId);
			} catch (Exception e) {
				e.printStackTrace();
			}
			return RestReturn.fail();
		}
		
	@GetMapping("pushUrls")
	public String toPushUrlPage(HttpSession session,HttpServletRequest request,@RequestParam(required=false)String name
			,@RequestParam(defaultValue="1")Integer pn,@RequestParam(defaultValue="10")Integer ps){
		PartnerInfo partnerInfo = (PartnerInfo) session.getAttribute("partner_user");
		PageInfo<PartnerPushUrl> pageInfo = partnerPushUrlService.getPushUrlInfo(partnerInfo.getPartner_id(),pn,ps,name);
		request.setAttribute("pageInfo", pageInfo);
		request.setAttribute("name", name);
		return "partner/PushChannel/pushUrl";
	}
	
	@ResponseBody
	@DeleteMapping("pushUrl/{pushId}")
	public RestReturn deletePartnerPushUrl(@PathVariable()Integer pushId){
		return  partnerPushUrlService.deletePartnerPushUrl(pushId);
	}
	
	
	@ResponseBody
	@PutMapping("pushUrl/{pushId}")
	public RestReturn updateeartnerPushUrl(@PathVariable()Integer pushId,String name){
		return  partnerPushUrlService.updatePartnerPushUrl(pushId,name);
	}

}
