<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/task 
		http://www.springframework.org/schema/task/spring-task.xsd">
		
	<context:property-placeholder location="classpath:config/*.properties"
		ignore-unresolvable="true" />
	<!-- 1. 数据源 : DriverManagerDataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${drivers}" />
		<property name="url" value="${novel.url}" />
		<property name="username" value="${novel.user}" />
		<property name="password" value="${novel.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="5" />
		<property name="minIdle" value="5" />
		<property name="maxActive" value="30" />
		<!-- 开启数据库密码解密 -->
		<property name="connectionProperties"
			value="config.decrypt=true;config.decrypt.key=${publickey}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="10000" />
		<!-- 超过时间限制是否强制回收   -->
		<property name="removeAbandoned" value="false" />  
		<!-- 超时时间；单位为秒。180秒=3分钟 默认300s   -->
		<!-- <property name="removeAbandonedTimeout" value="180" />   -->
		<!-- abanded连接时输出错误日志   -->
		<property name="logAbandoned" value="true" /> 

		<!-- 这里建议配置为TRUE，防止取到的连接不可用,但会降低性能 -->
		<!-- <property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" /> -->
		<property name="validationQuery" value="select 1"/>
	   <!--开启Druid的监控统计功能 -->
		<property name="filters" value="stat,config" />
	</bean>

	<!--
		2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源

		MyBatis定义数据源,同意加载配置
	-->
<!-- 	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="${novel.url}" />
		<property name="username" value="${novel.user}" />
		<property name="password" value="${n.password}" /> 
	</bean> -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations">
			<list>
				<value>classpath:com.kuaidu.nms.**.mapper</value>
			</list>
		</property>
		<property name="configLocation" value="classpath:config/mybatis-config.xml" /> 
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
<!-- 					<property name="properties">
						<value>
							reasonable=true
						</value>
						<props>
							<prop key=""></prop>
						</props>					
					</property> -->
				</bean>
			</array>
		</property>
	</bean>

	<!--3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory
		basePackage:指定sql映射文件/接口所在的包（自动扫描）-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.kuaidu.nms.**.mapper"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<!--
		4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源
	-->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- FastDFS -->
	<import resource="fastdfs.xml"/>
	<!-- 5. 使用声明式事务
		 transaction-manager：引用上面定义的事务管理器
	 -->
	<tx:annotation-driven transaction-manager="txManager" />
	
	
 	<context:component-scan base-package="com.kuaidu.nms.quartz">
 	 	<context:exclude-filter type="annotation"
                               expression="org.springframework.stereotype.Controller"/>
 	</context:component-scan>
	 	
	<!-- S 配置定时任务-->
     <task:executor id="executor" pool-size="5" /> 
    <!--配置线程池-->
  <task:scheduler id="scheduler" pool-size="10" />
    <task:annotation-driven executor="executor" scheduler="scheduler" />
    <!--E 配置定时任务-->
	

</beans>
